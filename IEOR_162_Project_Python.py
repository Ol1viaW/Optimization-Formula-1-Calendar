# -*- coding: utf-8 -*-
"""IEOR162.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GxYWmN2ipwnnZ7rF130Ys1Myr5aWPb7G
"""

#libraries for all questions
#python code
import pandas as pd
import numpy as np
from math import radians, sin, cos, sqrt, atan2

#Question 1
#distances in miles
#python code

def haversine(lat1, lon1, lat2, lon2):
    # Convert latitude and longitude from degrees to radians
    lat1 = radians(lat1)
    lon1 = radians(lon1)
    lat2 = radians(lat2)
    lon2 = radians(lon2)

    # Haversine formula
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))
    distance = 3958.8 * c  # Radius of Earth in miles
    return distance

#1
distance = haversine(26.031, 50.512, 21.632, 39.104)
print("Distance between Sakhir, Bahrain and Jeddah, Saudi Arabia:", distance, "miles")

#2
distance = haversine(21.632, 39.104, -37.846, 144.970)
print("Distance between Jeddah, Saudi Arabia and Melbourne, Australia:", distance, "miles")

#3
distance = haversine(-37.846, 144.970, 34.844, 136.534)
print("Distance between Melbourne, Australia and Suzuka, Japan:", distance, "miles")

#4
distance = haversine(34.844, 136.534, 31.340, 121.221)
print("Distance between Suzuka, Japan and Shangai, China:", distance, "miles")

#5
distance = haversine(31.340, 121.221, 25.958, -80.239)
print("Distance between and Shangai, China and Miami, USA:", distance, "miles")

#6
distance = haversine(25.958, -80.239, 44.341, 11.713)
print("Distance between Miami, USA and Imola, Italy:", distance, "miles")

#7
distance = haversine(44.341, 11.713, 43.737, 7.429)
print("Distance between Imola, Italy and Monaco, Monaco:", distance, "miles")

#8
distance = haversine(43.737, 7.429, 45.506, -73.525)
print("Distance between Monaco, Monaco and Montreal, Canada:", distance, "miles")

#9
distance = haversine(45.506, -73.525, 47.223, 14.761)
print("Distance between Montreal, Canada and Spielberg, Austria:", distance, "miles")

#10
distance = haversine(47.223, 14.761, 52.072, -1.017)
print("Distance between Spielberg, Austria and Silverstone, UK:", distance, "miles")

#11
distance = haversine(52.072, -1.017, 47.583, 19.250)
print("Distance between Silverstone, UK and Budapest, Hungary:", distance, "miles")

#12
distance = haversine(47.583, 19.250, 50.436, 5.971)
print("Distance between Budapest, Hungary and Spa-Francorchamps, Belgium:", distance, "miles")

#13
distance = haversine(50.436, 5.971, 45.621, 9.290)
print("Distance between Spa-Francorchamps, Belgium and Monza, Italy:", distance, "miles")

#14
distance = haversine(45.621, 9.290, 40.369, 49.842)
print("Distance between Monza, Italy and Baku, Azerbaijan:", distance, "miles")

#15
distance = haversine(40.369, 49.842, 1.291, 103.859)
print("Distance between Baku, Azerbaijan and Singapore, Singapore:", distance, "miles")

#16
distance = haversine(1.291, 103.859, 30.135, -97.633)
print("Distance between Singapore, Singapore and Austin, USA:", distance, "miles")

#17
distance = haversine(30.135, -97.633, 19.402, -99.091)
print("Distance between Austin, USA and Mexico City, Mexico:", distance, "miles")

#18
distance = haversine(19.402, -99.091, -23.702, -46.698)
print("Distance between Mexico City, Mexico and Sao Paulo, Brazil:", distance, "miles")

#19
distance = haversine(-23.702, -46.698, 36.116, -115.168)
print("Distance between Sao Paulo, Brazil and Las Vegas, USA:", distance, "miles")

#20
distance = haversine(36.116, -115.168, 25.490, 51.454)
print("Distance between Las Vegas, USA and Lusail, Qatar:", distance, "miles")

#21
distance = haversine(25.490, 51.454, 24.471, 54.601)
print("Distance between Lusail, Qatar and Yas Marina, UAE:", distance, "miles")

#Question 2
# The original distance with the 2024 Calender
#python code

original_distance = 782.0173073926259 + 7964.270319183995 + 5051.435091628797 + 917.8106285160093 + 8232.167067199074 + 5078.315559182578 + 216.8081183077432 + 3804.0243548234653 + 3970.431188161571 + 779.1823871698583 + 951.3426588923259 + 632.2495214820748 + 366.23692479770324 + 2058.5782906305026 + 4316.657882015947 + 9844.771235948667 + 747.1714996453251 + 4617.335340311489 + 6081.714876732002 + 8091.717011841366 + 209.2852706131558
print("original_distance of 2024 calendar", original_distance)

#Question 3
# Coordinates of the race tracks
#python code

#city long lat
cities = [
    ("Bahrain", 50.512, 26.031),
    ("Saudi Arabia", 39.104, 21.632),
    ("Australia", 144.970, -37.846),
    ("Japan", 136.534, 34.844),
    ("China", 121.221, 31.340),
    ("USA", -80.239, 25.958),
    ("Italy", 11.713, 44.341),
    ("Monaco", 7.429, 43.737),
    ("Canada", -73.525, 45.506),
    ("Austria", 14.761, 47.223),
    ("UK", -1.017, 52.072),
    ("Hungary", 19.250, 47.583),
    ("Belgium", 5.971, 50.436),
    ("Italy", 9.290, 45.621),
    ("Azerbaijan", 49.842, 40.369),
    ("Singapore", 103.859, 1.291),
    ("USA", -97.633, 30.135),
    ("Mexico", -99.091, 19.402),
    ("Brazil", -46.698, -23.702),
    ("USA", -115.168, 36.116),
    ("Qatar", 51.454, 25.490),
    ("UAE", 54.601, 24.471)
]

# Number of race tracks
n = len(cities)
#print(n)

# Initialize distance matrix
D = np.zeros((n, n), dtype = object)
labels = [city[0] for city in cities]

# Calculate distances between each pair of race tracks
for i in range(n):
    for j in range(n):
        if i != j:
            D[i][j] = haversine(cities[i][2], cities[i][1], cities[j][2], cities[j][1])
        else:
          D[i][j] = 0

# Round distances to one decimal place
#D = np.round(D, decimals=1)

# Display disstance matrix
#print("Race Track Labels:", labels)
#print("Distance Matrix D:")
print(D)

#Question 4

#python code

#enumerate all 24 calendars

#Since order matters you want all the permuations P(4,4) = 4!/0! = 4! = 24 total number of calendars
print("total number of calenders: ", 4*3*2*1)
# Coordinates of the race tracks
cities = [

    ("UK", -1.017, 52.072),
    ("Belgium", 5.971, 50.436),
    ("Italy", 9.290, 45.621),
    ("Monaco", 7.429, 43.737),
]

# Number of race tracks
n = len(cities)
#print(n)

# Initialize distance matrix
D = np.zeros((n, n), dtype = object)
labels = [city[0] for city in cities]

# Calculate distances between each pair of race tracks
for i in range(n):
    for j in range(n):
        if i != j:
            D[i][j] = haversine(cities[i][2], cities[i][1], cities[j][2], cities[j][1])
        else:
          D[i][j] = 0

# Round distances to one decimal place
#D = np.round(D, decimals=1)

# Display distance matrix
print("Distance Matrix D of 4 races:")
print(D)

#4 enumerate all the calendars

#x21 x12 x34 x43
#UK Belgium Italy Monaco

#Question 4

#python code

#Enumerate all 24 calendars
UKB = 322.47299866125786
UKI = 645.6141553779291
UKM = 695.1798199120759

BUK = 322.47299866125786
BI = 366.23692479770324
BM = 467.8850637848395

IUK = 645.6141553779291
IB = 366.23692479770324
IM = 159.06206634623513

MUK = 695.1798199120759
MB = 467.8850637848395
MI = 159.06206634623513

#UK -> B -> I -> M
calendar_1 =  UKB + BI + IM
#UK -> B -> M -> I
calendar_2 = UKB + BM + MI
#UK -> I -> B -> M
calendar_3 = UKB + IB + BM
#UK -> I -> M -> B
calendar_4 = UKI + IM + MB
#UK -> M -> I -> B
calendar_5 = UKM + MI + IM
#UK -> M -> B -> I
calendar_6 = UKM + MB + BI

#B -> UK -> I -> M
calendar_7 = BUK + UKI + IM
#B -> UK -> M -> I
calendar_8 = BUK + UKM + MI
#B -> I -> UK -> M
calendar_9 = BI + IUK + UKM
#B -> I -> M -> UK
calendar_10 = BI + IM + MUK
#B -> M -> UK -> I
calendar_11 = BM + MUK + UKI
#B -> M -> I -> UK
calendar_12 = BM + MI + IUK

#I -> UK -> B -> M
calendar_13 = IUK + UKB + BM
#I -> UK -> M -> B
calendar_14 = IUK + UKM + MB
#I -> B -> UK -> M
calendar_15 = IB + BUK + UKM
#I -> B -> M -> UK
calendar_16 = IB + BM + MUK
#I -> M -> UK -> B
calendar_17 = IM + MUK + UKB
#I -> M -> B -> UK
calendar_18 = IM + MB + BUK

#M -> UK -> B -> I
calendar_19 = MUK + UKB + BI
#M -> UK -> B -> I
calendar_20 = MUK + UKB + BI
#M -> B -> I -> UK
calendar_21 = MB + BI + IUK
#M -> B -> UK -> I
calendar_22 = MB + BUK + UKI
#M -> I -> UK -> B
calendar_23 = MI + IUK + UKB
#M -> I -> B -> UK
calendar_24 =  MI + IB + BUK

print(calendar_1, calendar_2, calendar_3, calendar_4, calendar_5, calendar_6, calendar_7, calendar_8,
          calendar_9, calendar_10, calendar_11, calendar_12, calendar_13, calendar_14, calendar_15, calendar_16,
          calendar_17, calendar_18, calendar_19, calendar_20, calendar_21, calendar_22, calendar_23, calendar_24)

print("min: ", min(calendar_1, calendar_2, calendar_3, calendar_4, calendar_5, calendar_6, calendar_7, calendar_8,
          calendar_9, calendar_10, calendar_11, calendar_12, calendar_13, calendar_14, calendar_15, calendar_16,
          calendar_17, calendar_18, calendar_19, calendar_20, calendar_21, calendar_22, calendar_23, calendar_24))

"""Calendar 1 and calendar 24 have the shortest path of 847.7719898051962 miles.
Calendar 24's path starts at Monaco and goes from Monaco to Italy to Belgium to UK.
Calendar 1's path is the exact reverse of calendar 24.
Calendar 1 goes from UK to Belgium to Italy to Monaco."""

#Question 5 nearest neighbor distances

#1
distance = haversine(26.031, 50.512, 25.490, 51.454)
print("Distance between Sakhir, Bahrain and Lusail, Qatar:", distance, "miles")

#2
distance = haversine(25.490, 51.454, 24.471, 54.601)
print("Distance between Lusail, Qatar and Yas Marina, UAE:", distance, "miles")

#3
distance = haversine(24.471, 54.601, 21.632, 39.104)
print("Distance between Yas Marina, UAE and Jeddah, Saudi Arabia:", distance, "miles")

#4
distance = haversine(21.632, 39.104, 40.369, 49.842)
print("Distance between Jeddah, Saudi Arabia and Baku, Azerbaijan:", distance, "miles")

#5
distance = haversine(40.369, 49.842, 47.583, 19.250)
print("Distance between and Baku, Azerbaijan and Budapest, Hungary:", distance, "miles")

#6
distance = haversine(47.583, 19.25, 47.223, 14.761)
print("Distance between Budapest, Hungary and Spielberg, Austria:", distance, "miles")

#7
distance = haversine(47.223, 14.761, 44.341, 11.713)
print("Distance between Spielberg, Austria and Imola, Italy:", distance, "miles")

#8
distance = haversine(44.341, 11.713, 45.621, 9.290)
print("Distance between Imola, Italy and Monza, Italy:", distance, "miles")

#9
distance = haversine(45.621, 9.290, 43.737, 7.429)
print("Distance between Monza, Italy and Monaco, Monaco:", distance, "miles")

#10
distance = haversine(43.737, 7.429, 50.436, 5.971)
print("Distance between Monaco, Monaco and Spa-Francorchamps, Belgium:", distance, "miles")

#11
distance = haversine(50.436, 5.971, 52.072, -1.017)
print("Distance between Spa-Francorchamps, Belgium and Silverstone, UK:", distance, "miles")

#12
distance = haversine(52.072, -1.017, 45.506, -73.525)
print("Distance between Silverstone, UK and Montreal, Canada:", distance, "miles")

#13
distance = haversine(45.506, -73.525, 25.958, -80.239)
print("Distance between Montreal, Canada and Miami, USA:", distance, "miles")

#14
distance = haversine(25.958, -80.239, 30.135, -97.633)
print("Distance between Miami, USA and Austin, USA:", distance, "miles")

#15
distance = haversine(30.135, -97.633, 19.402, -99.091)
print("Distance between Austin, USA and Mexico City, Mexico:", distance, "miles")

#16
distance = haversine(19.402, -99.091, 36.116, -115.168)
print("Distance between Mexico City, Mexico and Las Vegas, USA:", distance, "miles")

#17
distance = haversine(36.116, -115.168, 34.844, 136.534)
print("Distance between Las Vegas, USA and Sazuka, Japan:", distance, "miles")

#18
distance = haversine(34.844, 136.534, 31.340, 121.221)
print("Distance between Sazuka, Japan and Shangai, China:", distance, "miles")

#19
distance = haversine(31.340, 121.221, 1.291, 103.859)
print("Distance between Shangai, China and Singapore, Singapore:", distance, "miles")

#20
distance = haversine(1.291, 103.859, -37.846, 144.970)
print("Distance between Singapore, Singapore and Melbourne, Australia:", distance, "miles")

#21
distance = haversine(-37.846, 144.970, -23.702, -46.698)
print("Distance between Melbourne, Australia and Sao Paulo, Brazil:", distance, "miles")

# 5 continued, summing the distances:
69.52191708019357 + 209.28766858207547 + 1003.9851583840648 + 1439.653786990973 + 1588.6615952533011 + 211.3682021912183 + 247.38941746176292 + 147.78877003477425 + 159.0638888628904 + 467.8904247633625 + 322.47669352342353 + 3192.1661027961154 + 1400.8836940946312 + 1097.9552648176011 + 747.1800606588573 + 1511.9242754633815 + 5707.910936621111 + 917.8211446949781 + 2365.743374040016 + 3764.247090580009 + 8117.362337654732

#Question 6 and Question 7 dat file

param N := 22;

param C
: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 :=
1 0 782.0173073926259 7526.320866070722 5004.313476896896 4228.313382286822 7571.930090359539 2497.0802551325487 2691.9351533693284 6374.553469107903 2430.4641329151195 3205.1072768531444 2255.1662851613237 2883.52331860827 2636.1310023309875 991.407739500109 3931.132938624279 8020.876597606137 8693.323920917635 7340.522930705083 8042.531728046679 69.52112051440675 277.3083469843312
2 782.0173073926259 0 7964.270319183995 5774.215885332073 5009.591160962969 7211.373575024524 2211.773071034508 2367.4328816235957 6169.7069188419555 2227.9251721666633 2992.12497798539 2105.2360785934025 2676.6149020917755 2359.5192608456096 1439.63729177623 4569.163327835269 7849.0636954680185 8434.930846418645 6558.792533080463 8107.099270750885 825.8915357407659 1003.9736549580773
3 7526.320866070722 7964.270319183995 0 5051.435091628797 5019.569592893024 9689.853786165631 9995.732819751152 10203.873622085646 10402.092147578653 9866.734173152876 10530.559283485058 9660.010138989082 10259.868919551789 10120.491527878272 8071.3958996252 3764.2039607215215 8877.286711114784 8427.933938057087 8117.269330824815 8159.385958537341 7456.818816988532 7254.626760214565
4 5004.313476896896 5774.215885332073 5051.435091628797 0 917.8106285160093 7595.943011808028 5964.222668258246 6135.338393978309 6576.252615541362 5718.763499243337 5907.586206919063 5550.026399691655 5819.768519955735 5976.915918166968 4562.71996408726 3129.187057824305 6729.266454878762 7207.526591063056 11642.842977584287 5707.845536719076 4973.055188073485 4838.744296508189
5 4228.313382286822 5009.591160962969 5019.569592893024 917.8106285160093 0 8232.167067199074 5584.111746709864 5779.535555797646 7047.2840252213355 5350.797765325697 5701.457660506688 5158.761792755606 5546.5130422573875 5627.797867479733 3938.2001160624645 2365.716267908435 7483.300486983961 8028.667307130421 11528.730395054956 6517.016167666487 4189.0663700319665 4035.299638722149
6 7571.930090359539 7211.373575024524 9689.853786165631 7595.943011808028 8232.167067199074 0 5078.315559182578 4891.057092123588 1400.8676430985006 5144.067691080181 4376.7474837503 5327.454262492585 4695.415917510798 4937.205628402868 6844.740416048163 10534.296082301818 1097.9426847042191 1282.6560620201037 4098.630418020586 2170.0218814231225 7640.075876071598 7829.053497383858
7 2497.0802551325487 2211.773071034508 9995.732819751152 5964.222668258246 5584.111746709864 5078.315559182578 0 216.8081183077432 3959.366727729321 247.38658293195925 790.991202274029 425.4086230604863 499.1472608780725 147.7870767057806 1948.215139975466 6262.052431986255 5638.398281927105 6247.739010760166 5972.4856886090765 5960.011902844308 2565.902064171721 2761.1815909967327
8 2691.9351533693284 2367.4328816235957 10203.873622085646 6135.338393978309 5779.535555797646 4891.057092123588 216.8081183077432 0 3804.0243548234653 428.8750637482047 695.1798199120759 628.7873330049875 467.8850637848395 159.06206634623513 2164.490540306665 6477.1583368142265 5482.979056170333 6076.324738487649 5782.973416425482 5849.471928276736 2761.0870586814626 2958.9538506119784
9 6374.553469107903 6169.7069188419555 10402.092147578653 6576.252615541362 7047.2840252213355 1400.8676430985006 3959.366727729321 3804.0243548234653 0 3970.431188161571 3192.1295277071345 4128.533543853778 3513.7165455267614 3811.894594515493 5548.757714405878 9199.47154194368 1679.3568642490793 2319.009396928914 5070.531229249808 2244.482952334718 6438.942687721506 6608.332108895511
10 2430.4641329151195 2227.9251721666633 9866.734173152876 5718.763499243337 5350.797765325697 5144.067691080181 247.38658293195925 428.8750637482047 3970.431188161571 0 779.1823871698583 211.3657803840335 456.88510128568004 283.0304402809032 1795.8614512556633 6110.603444709462 5643.424619031361 6278.584741969893 6210.231732251658 5899.354411718099 2497.9270399744496 2684.9871055009826
11 3205.1072768531444 2992.12497798539 10530.559283485058 5907.586206919063 5701.457660506688 4376.7474837503 790.991202274029 695.1798199120759 3192.1295277071345 779.1823871698583 0 951.3426588923259 322.47299866125786 645.6141553779291 2504.169767309737 6774.415897780973 4867.104226918421 5499.5004049261615 5916.6769080461145 5169.906651387822 3271.9707931253583 3455.278840396314
12 2255.1662851613237 2105.2360785934025 9660.010138989082 5550.026399691655 5158.761792755606 5327.454262492585 425.4086230604863 628.7873330049875 4128.533543853778 211.3657803840335 951.3426588923259 0 632.2495214820748 491.46546823767994 1588.643392742111 5901.399334418163 5794.568658271823 6443.293620809501 6396.764316252355 6005.399987315444 2321.654582916282 2503.9620596229756
13 2883.52331860827 2676.6149020917755 10259.868919551789 5819.768519955735 5546.5130422573875 4695.415917510798 499.1472608780725 467.8850637848395 3513.7165455267614 456.88510128568004 322.47299866125786 632.2495214820748 0 366.23692479770324 2202.6345667483874 6495.818864411119 5187.5566505329325 5821.9596419049885 6045.029153083861 5468.412001747596 2950.5558125709777 3134.9719020068283
14 2636.1310023309875 2359.5192608456096 10120.491527878272 5976.915918166968 5627.797867479733 4937.205628402868 147.7870767057806 159.06206634623513 3811.894594515493 283.0304402809032 645.6141553779291 491.46546823767994 366.23692479770324 0 2058.5782906305026 6375.1924206820295 5490.839967137349 6101.961478266638 5937.426241243482 5815.483828280145 2704.732925846458 2898.391918253769
15 991.407739500109 1439.63729177623 8071.3958996252 4562.71996408726 3938.2001160624645 6844.740416048163 1948.215139975466 2164.490540306665 5548.757714405878 1795.8614512556633 2504.169767309737 1588.643392742111 2202.6345667483874 2058.5782906305026 0 4316.657882015947 7138.741432022203 7849.138958184608 7591.008483488561 7067.133067436724 1032.2269786254355 1132.481936064431
16 3931.132938624279 4569.163327835269 3764.2039607215215 3129.187057824305 2365.716267908435 10534.296082301818 6262.052431986255 6477.1583368142265 9199.47154194368 6110.603444709462 6774.415897780973 5901.399334418163 6495.818864411119 6375.1924206820295 4316.657882015947 0 9844.771235948667 10323.353927947246 9930.80898391375 8836.201666076617 3864.186124183347 3655.0319616096062
17 8020.876597606137 7849.0636954680185 8877.286711114784 6729.266454878762 7483.300486983961 1097.9426847042191 5638.398281927105 5482.979056170333 1679.3568642490793 5643.424619031361 4867.104226918421 5794.568658271823 5187.5566505329325 5490.839967137349 7138.741432022203 9844.771235948667 0 747.1714996453251 5023.628546846793 1093.4945490258538 8082.682334325024 8239.101531075006
18 8693.323920917635 8434.930846418645 8427.933938057087 7207.526591063056 8028.667307130421 1282.6560620201037 6247.739010760166 6076.324738487649 2319.009396928914 6278.584741969893 5499.5004049261615 6443.293620809501 5821.9596419049885 6101.961478266638 7849.138958184608 10323.353927947246 747.1714996453251 0 4617.335340311489 1511.9069521903668 8757.891202005134 8926.500655920216
19 7340.522930705083 6558.792533080463 8117.269330824815 11642.842977584287 11528.730395054956 4098.630418020586 5972.4856886090765 5782.973416425482 5070.531229249808 6210.231732251658 5916.6769080461145 6396.764316252355 6045.029153083861 5937.426241243482 7591.008483488561 9930.80898391375 5023.628546846793 4617.335340311489 0 6081.714876732002 7383.97016951669 7548.900824629599
20 8042.531728046679 8107.099270750885 8159.385958537341 5707.845536719076 6517.016167666487 2170.0218814231225 5960.011902844308 5849.471928276736 2244.482952334718 5899.354411718099 5169.906651387822 6005.399987315444 5468.412001747596 5815.483828280145 7067.133067436724 8836.201666076617 1093.4945490258538 1511.9069521903668 6081.714876732002 0 8091.717011841366 8197.706891329544
21 69.52112051440675 825.8915357407659 7456.818816988532 4973.055188073485 4189.0663700319665 7640.075876071598 2565.902064171721 2761.0870586814626 6438.942687721506 2497.9270399744496 3271.9707931253583 2321.654582916282 2950.5558125709777 2704.732925846458 1032.2269786254355 3864.186124183347 8082.682334325024 8757.891202005134 7383.97016951669 8091.717011841366 0 209.2852706131558
22 277.3083469843312 1003.9736549580773 7254.626760214565 4838.744296508189 4035.299638722149 7829.053497383858 2761.1815909967327 2958.9538506119784 6608.332108895511 2684.9871055009826 3455.278840396314 2503.9620596229756 3134.9719020068283 2898.391918253769 1132.481936064431 3655.0319616096062 8239.101531075006 8926.500655920216 7548.900824629599 8197.706891329544 209.2852706131558 0
;

#Question 6

#AMPL code

param N;  # number of cities

set CITIES := 1..N;  # set of cities

param C{i in CITIES, j in CITIES};  # distance from city i to city j

var x{i in CITIES, j in CITIES: i != j} binary;  # binary decision variables for path existence
var u{i in CITIES} >= 0;  # artificial variables

# Objective Function: minimize total distance traveled
minimize Total_Distance:
    sum{i in CITIES, j in CITIES: i != j} C[i,j] * x[i,j];


# Constraints
subject to One_Outgoing_Edge {i in CITIES}:
    sum{j in CITIES: j != i} x[i,j] = 1;

subject to One_Incoming_Edge {j in CITIES}:
    sum{i in CITIES: i != j} x[i,j] = 1;

subject to Subtour_Elimination {i in CITIES, j in CITIES: 2 <= i && 2<= j && i != j && i<= N && j<= N}:
    u[i] - u[j] + N * x[i,j] <= N - 1;


#reset;
#ampl: option solver cplex;
#ampl: option cplex_options 'sensitivity';
#ampl: option presolve 0;
#ampl: model 'six.mod';
#ampl: data '6parameters.dat';
#ampl: solve;
#display _varname, _var, _var.rc, _var.current, _var.up;
"""
CPLEX 22.1.1.0: optimal integer solution within mipgap or absmipgap; objective 38208.15935
25225 MIP simplex iterations
3130 branch-and-bound nodes
absmipgap = 3.7657, relmipgap = 9.85576e-05

ampl: display _varname, _var, _var.rc, _var.current, _var.up;
:      _varname  _var    _var.rc   _var.current _var.up    :=

20    'x[1,21]'     1      69.5211      69.5211   1e+20
22    'x[2,1]'      1     782.017      782.017    1e+20
60    'x[3,19]'     1    8117.27      8117.27     1e+20
67    'x[4,5]'      1     917.811      917.811    1e+20
99    'x[5,16]'     1    2365.72      2365.72     1e+20
122   'x[6,18]'     1    1282.66      1282.66     1e+20
135   'x[7,10]'     1     247.387      247.387    1e+20
154   'x[8,7]'      1     216.808      216.808    1e+20
178   'x[9,11]'     1    3192.13      3192.13     1e+20
200   'x[10,12]'    1     211.366      211.366    1e+20
222   'x[11,13]'    1     322.473      322.473    1e+20
233   'x[12,2]'     1    2105.24      2105.24     1e+20
265   'x[13,14]'    1     366.237      366.237    1e+20
281   'x[14,8]'     1     159.062      159.062    1e+20
298   'x[15,4]'     1    4562.72      4562.72     1e+20
318   'x[16,3]'     1    3764.2       3764.2      1e+20
355   'x[17,20]'    1    1093.49      1093.49     1e+20
374   'x[18,17]'    1     747.171      747.171    1e+20
384   'x[19,6]'     1    4098.63      4098.63     1e+20
408   'x[20,9]'     1    2244.48      2244.48     1e+20
441   'x[21,22]'    1     209.285      209.285    1e+20
456   'x[22,15]'    1    1132.48      1132.48     1e+20
463   'u[1]'        0       0            0            0
464   'u[2]'       20       0            0        1e+20
465   'u[3]'        6       0            0        1e+20
466   'u[4]'        3       0            0        1e+20
467   'u[5]'        4       0            0        1e+20
468   'u[6]'        8       0            0        1e+20
469   'u[7]'       17       0            0        1e+20
470   'u[8]'       16       0            0        1e+20
471   'u[9]'       12       0            0        1e+20
472   'u[10]'      18       0            0        1e+20
473   'u[11]'      13       0            0        1e+20
474   'u[12]'      19       0            0        1e+20
475   'u[13]'      14       0            0        1e+20
476   'u[14]'      15       0            0        1e+20
477   'u[15]'       2       0            0        1e+20
478   'u[16]'       5       0            0        1e+20
479   'u[17]'      10       0            0        1e+20
480   'u[18]'       9       0            0        1e+20
481   'u[19]'       7       0            0        1e+20
482   'u[20]'      11       0            0        1e+20
483   'u[21]'       0       0            0        1e+20
484   'u[22]'       1       0            0        1e+20
;

"""Corrected Q6 answer
loop: 382008
drop x[19,3] with reduced cost = 8117
new objective value = 38208.15935 - 8117.27 = 30090.88935
3 -> 16 -> 5 -> 4 -> 15 -> 22 -> 21 -> 1 -> 2 -> 12 -> 10
-> 7 -> 8 -> 14 -> 13 -> 11 -> 9 -> 20 -> 17 -> 18 -> 6 -> 19

1: Sahkir
2: Jeddah
3: Melbourne
4: Suzuka
5: Shangai
6: Miami
7: Imola
8: Monaco
9: Montreal
10: Spielberg
11: Silverstone
12: Budapest
13: Spa-Francorchamps
14: Monza
15: Baku
16: Singapore
17: Austin
18: Mexico City
19: Sao Paulo
20: Las Vegas
21: Lusail
22: Yas Marina


Order: Melbourne, Singapore, Shangai, Suzuka, Baku, Yas Marina, Lusail, Sahkir,
Jeddah, Budapest, Spielberg, Imola, Monaco, Monza, Spa-Francorchamps, Silverstone,
Montreal, Las Vegas, Austin, Mexico City, Miami, Sao Paulo

#Question 6
distance_6 = 30090.88935 #path not a loop distance

#Question 7

#ample code
param N;  # number of cities

set CITIES := 1..N;  # set of cities

param C{i in CITIES, j in CITIES};  # distance from city i to city j

var x{i in CITIES, j in CITIES: i != j} binary;  # binary decision variables for path existence
var u{i in CITIES} >= 0;  # artificial variables
var y binary;
var z binary;
var t binary;
var s1 binary;
var s2 binary;

# Objective Function: minimize total distance traveled
minimize Total_Distance:
    sum{i in CITIES, j in CITIES: i != j} C[i,j] * x[i,j];

# Constraints
subject to One_Outgoing_Edge {i in CITIES}:
    sum{j in CITIES: j != i} x[i,j] = 1;

subject to One_Incoming_Edge {j in CITIES}:
    sum{i in CITIES: i != j} x[i,j] = 1;

subject to Subtour_Elimination {i in CITIES, j in CITIES: 2 <= i && 2<= j && i != j && i<= N && j<= N}:
    u[i] - u[j] + N * x[i,j] <= N - 1;


#7-1
subject to Constraint7_1:
#+12 so u constraints go from 1 to 22
	u[9] >=9;


#7-2
subject to Constraint7_2a:
	0 <= u[16] - 7*y + 22*y <= 22;
subject to Constraint7_2b:
	u[16] >= 18*z;
subject to Constraint7_2c:
	y + z = 1;


#7-3
subject to Constraint7_3a:
	x[6,17] = 0;
subject to Constraint7_3b:
	x[17,6] = 0;
subject to Constraint7_3c:
	x[6,20] = 0;
subject to Constraint7_3d:
	x[20,6] = 0;
subject to Constraint7_3e:
	x[17,20] = 0;
subject to Constraint7_3f:
	x[20,17] = 0;


#7-4
subject to Constraint7_4a:
	u[1] = 1;
subject to Constraint7_4b:
	u[22] = 22;

#7-5
subject to Constraint7_5:
	x[4,5] + x[5,4] = 1;

#7-6
subject to Constraint7_6a:
	u[19] >= 12 * t;
subject to Constraint7_6b:
	t >= 1 - u[8] / 11;
subject to Constraint7_6c:
	u[19] <= 22; #idk if we sill need this

#7-7
subject to Constraint7_7a: #s1, s2
	u[2] <= 22 - 11*s1;
subject to Constraint7_7b: #s1, s2
	u[21] <= 22 - 11*s2;
subject to Constraint7_7c: #s1, s2
	s1 + s2 >= 1;

"""Solution
CPLEX 22.1.1.0: optimal integer solution; objective 40143.40612 #loop
14623 MIP simplex iterations
1976 branch-and-bound nodes

suffix up OUT;
suffix down OUT;
suffix current OUT;
ampl: display _varname, _var, _var.rc, _var.current, _var.up;
:      _varname  _var    _var.rc   _var.current _var.up    :=
20    'x[1,21]'     1      69.5211      69.5211   1e+20
35    'x[2,15]'     1    1439.64      1439.64     1e+20
57    'x[3,16]'     1    3764.2       3764.2      1e+20
67    'x[4,5]'      1     917.811      917.811    1e+20
87    'x[5,3]'      1    5019.57      5019.57     1e+20
113   'x[6,9]'      1    1400.87      1400.87     1e+20
133   'x[7,8]'      1     216.808      216.808    1e+20
160   'x[8,14]'     1     159.062      159.062    1e+20
184   'x[9,17]'     1    1679.36      1679.36     1e+20
196   'x[10,7]'     1     247.387      247.387    1e+20
228   'x[11,19]'    1    5916.68      5916.68     1e+20
241   'x[12,10]'    1     211.366      211.366    1e+20
263   'x[13,11]'    1     322.473      322.473    1e+20
286   'x[14,13]'    1     366.237      366.237    1e+20
306   'x[15,12]'    1    1588.64      1588.64     1e+20
336   'x[16,22]'    1    3655.03      3655.03     1e+20
353   'x[17,18]'    1     747.171      747.171    1e+20
376   'x[18,20]'    1    1511.91      1511.91     1e+20
384   'x[19,6]'     1    4098.63      4098.63     1e+20
403   'x[20,4]'     1    5707.85      5707.85     1e+20
422   'x[21,2]'     1     825.892      825.892    1e+20
442   'x[22,1]'     1     277.308      277.308    1e+20
463   'u[1]'        1       0            0        1e+20
464   'u[2]'        3       0            0            0
465   'u[3]'       20       0            0            0
466   'u[4]'       18       0            0            0
467   'u[5]'       19       0            0            0
468   'u[6]'       13       0            0            0
469   'u[7]'        7       0            0            0
470   'u[8]'        8       0            0            0
471   'u[9]'       14       0            0            0
472   'u[10]'       6       0            0            0
473   'u[11]'      11       0            0            0
474   'u[12]'       5       0            0            0
475   'u[13]'      10       0            0            0
476   'u[14]'       9       0            0            0
477   'u[15]'       4       0            0            0
478   'u[16]'      21       0            0            0
479   'u[17]'      15       0            0            0
480   'u[18]'      16       0            0            0
481   'u[19]'      12       0            0        1e+20
482   'u[20]'      17       0            0            0
483   'u[21]'       2       0            0            0
484   'u[22]'      22       0            0        1e+20
485   y             0       0            0        1e+20
486   z             1       0            0        1e+20
487   t             1       0            0        1e+20
488   s1            1       0            0        1e+20
489   s2            1       0            0        1e+20
;
"""

#Question 7
distance_7 = 40143.40612 - 277.308
print("total distance", distance_7)

#Question 7
#percentage decrese in imporvement from #6 to #7
(distance_7 - distance_6) / (distance_6) * 100

#Question 6
#Percentage Improvement of minimized total distance traveled vs original 2024 calendar
improvement_from_original = (74713.52253447627 - distance_6) / (distance_6) * 100
improvement_from_original

#Question 6
improvement_from_NN = (34690.28180454947 - distance_6) / (distance_6) * 100
improvement_from_NN